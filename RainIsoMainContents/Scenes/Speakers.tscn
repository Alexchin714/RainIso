[gd_scene load_steps=19 format=2]

[ext_resource path="res://RainIsoMainContents/Resources/Speakers.png" type="Texture" id=1]
[ext_resource path="res://RainIsoMainContents/Scenes/Speakers.gd" type="Script" id=2]
[ext_resource path="res://RainIsoMainContents/Resources/GlowPiece2.png" type="Texture" id=3]
[ext_resource path="res://RainIsoMainContents/Resources/White.png" type="Texture" id=4]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame2.png" type="Texture" id=5]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame7.png" type="Texture" id=6]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame1.png" type="Texture" id=7]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame5.png" type="Texture" id=8]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame6.png" type="Texture" id=9]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame4.png" type="Texture" id=10]
[ext_resource path="res://RainIsoMainContents/Resources/SpeakersFrame3.png" type="Texture" id=11]
[ext_resource path="res://RainIsoMainContents/Resources/BlankSpace.png" type="Texture" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;

uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;

uniform bool useTexture;
uniform sampler2D outlineTexture;

varying vec2 o;
varying vec2 f;

void vertex()
{
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					outline_sample = vec4(0);
				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	
				
				if(outline_sample.a > final_color.a){
					if(!useTexture)
					{
						final_color = mix(outline_color, outline_color_2, flipColors ? final_uv.y : final_uv.x);
					}
					else
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/intensity = 200
shader_param/precision = 0.015
shader_param/flipColors = null
shader_param/outline_color = null
shader_param/outline_color_2 = Color( 0, 0, 0, 1 )
shader_param/use_outline_uv = null
shader_param/useTexture = null

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 4, 64 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 40, 68 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 32, 64 )

[sub_resource type="Animation" id=6]
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ ExtResource( 1 ), ExtResource( 7 ), ExtResource( 5 ), ExtResource( 11 ), ExtResource( 10 ), ExtResource( 8 ), ExtResource( 9 ), ExtResource( 6 ), ExtResource( 12 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Whitener:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[node name="Speakers" type="Node2D"]
script = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
texture = ExtResource( 1 )

[node name="Whitener" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
scale = Vector2( 4, 8 )
texture = ExtResource( 4 )

[node name="Lefttouch" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 10

[node name="CollisionShape2D" type="CollisionShape2D" parent="Lefttouch"]
position = Vector2( -32, 0 )
shape = SubResource( 3 )
disabled = true

[node name="Righttouch" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 10

[node name="CollisionShape2D" type="CollisionShape2D" parent="Righttouch"]
position = Vector2( 32, 0 )
shape = SubResource( 3 )
disabled = true

[node name="Timer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="AreaEnter" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 10

[node name="CollisionShape2D" type="CollisionShape2D" parent="AreaEnter"]
shape = SubResource( 4 )

[node name="Light2D" type="Light2D" parent="."]
texture = ExtResource( 3 )
color = Color( 0.517647, 0.694118, 0.682353, 1 )
energy = 0.25

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
shape = SubResource( 5 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
playback_speed = 2.0
anims/SpeakerBlast = SubResource( 6 )

[connection signal="body_entered" from="Lefttouch" to="." method="_on_Lefttouch_body_entered"]
[connection signal="body_entered" from="Righttouch" to="." method="_on_Righttouch_body_entered"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="body_entered" from="AreaEnter" to="." method="_on_AreaEnter_body_entered"]
