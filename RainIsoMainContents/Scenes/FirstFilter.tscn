[gd_scene load_steps=13 format=2]

[ext_resource path="res://RainIsoMainContents/Scenes/FirstFilter.gd" type="Script" id=1]
[ext_resource path="res://RainIsoMainContents/CustomNodes/CustomNodeScripts/ScreenFilter.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
// Simple Mosic Conversion

uniform float _size : hint_range(0, 90) = 3.0;


void fragment( )
{
	vec2 moz = floor( FRAGCOORD.xy / _size ) * _size;
	COLOR = vec4(( texelFetch( SCREEN_TEXTURE, ivec2( moz ), 0 ).xyz ), 1.0 );
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/_size = 3.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float SCREEN_WIDTH = 320.; // Lower num - bigger pixels (this will be the screen width)
uniform float COLOR_FACTOR :hint_range(0., 10.) = 4.;   // Higher num - higher colors quality
uniform float DITHERING_STRENTH :hint_range(0., .07) = 0.005; // Be carefull with this one, dithering can get messy really easily

int PSXDither(ivec2 fragcoord) {
    const int dither_table[16] = {
        -4, +0, -3, +1, 
        +2, -2, +3, -1, 
        -3, +1, -4, +0, 
        +3, -1, +2, -2
    };
    
    int x = fragcoord.x % 4;
    int y = fragcoord.y % 4;
    
    return dither_table[y * 4 + x];
}

void fragment(){                  
    // Reduce pixels            
    vec2 size = SCREEN_WIDTH * SCREEN_PIXEL_SIZE.xy/SCREEN_PIXEL_SIZE.x;
    vec2 coor = floor( UV * size) ;
    vec2 uv =  FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
    
    // Get source color
    vec3 col = texture(SCREEN_TEXTURE, uv).xyz;     
    
    // Dithering
    col += float(PSXDither(ivec2(FRAGCOORD.xy))) * DITHERING_STRENTH;
    
    // Reduce colors    
    col = floor(col * COLOR_FACTOR) / COLOR_FACTOR;    
    
    // Output to screen
    COLOR = vec4(col,1.);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/SCREEN_WIDTH = 320.0
shader_param/COLOR_FACTOR = 10.0
shader_param/DITHERING_STRENTH = 0.07

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform sampler2D warm_color: hint_black;
uniform sampler2D cool_color: hint_black;
uniform float temperature = 0;

void fragment(){
	
	vec4 input_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
	
	float grayscale_value = dot(input_color.rgb, vec3(0.299, 0.587, 0.114));
	vec3 sampled_color;
	if (temperature > 0.0){
		sampled_color = texture(warm_color, vec2(grayscale_value, 0.0)).rgb;
		COLOR.rgb = mix(input_color.rgb, sampled_color, temperature);
	}
	else{
		sampled_color = texture(cool_color, vec2(grayscale_value, 0.0)).rgb;
		COLOR.rgb = mix(input_color.rgb, sampled_color, temperature * -1.0);
	}
	COLOR.a = input_color.a;
}"

[sub_resource type="Gradient" id=7]
colors = PoolColorArray( 0, 0, 0, 1, 0.324219, 0.794098, 1, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 7 )

[sub_resource type="Gradient" id=9]
colors = PoolColorArray( 0, 0, 0, 1, 1, 0.707245, 0.292969, 1 )

[sub_resource type="GradientTexture" id=10]
gradient = SubResource( 9 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/temperature = 0.0
shader_param/warm_color = SubResource( 10 )
shader_param/cool_color = SubResource( 8 )

[node name="FirstFilter" type="CanvasLayer"]
script = ExtResource( 1 )

[node name="MosaicFilter" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_right = 1280.0
margin_bottom = 720.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DitherFilter" type="ColorRect" parent="."]
material = SubResource( 4 )
margin_right = 1280.0
margin_bottom = 720.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="WhiteBalanceFilter" type="ColorRect" parent="."]
self_modulate = Color( 1, 1, 1, 0.686275 )
material = SubResource( 6 )
margin_right = 1280.0
margin_bottom = 720.0
script = ExtResource( 2 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}
